// <auto-generated />
using System;
using CryptoBot.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CryptoBot.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CryptoBot.DAL.Models.User", b =>
                {
                    b.Property<long>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TelegramId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CryptoBot.DAL.Models.UserPostInfo", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CryptoSet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastPostTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Timer")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("UserPostsInfo");
                });

            modelBuilder.Entity("CryptoBot.DAL.Models.UserPostInfo", b =>
                {
                    b.HasOne("CryptoBot.DAL.Models.User", "User")
                        .WithOne("PostInfo")
                        .HasForeignKey("CryptoBot.DAL.Models.UserPostInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoBot.DAL.Models.User", b =>
                {
                    b.Navigation("PostInfo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
